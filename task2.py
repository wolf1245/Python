# -*- coding: utf-8 -*-
# !/usr/bin/env python
# Домашняя работа
# Эта домашняя работа должна быть решена БЕЗ использования готовых функций (если именно они "решают" задачу)
# и сторонних библиотек. Используйте циклы и условия.

# 1 Напишите программу, которая будет запрашивать на вход числа (через запятую на одной строке)
# и выводить наибольшее значение из списка.
# Ограничение: нельзя пользоваться готовой функцией для нахождения максимума (например, max()),
# готовыми функциями и методами сортировки (например, sort(),sorted()), функцией set().
# Формат ввода:
# 1, 2, 3, 6, 7
# Формат вывода:
# 7
# numbers = str(input("Введите числа через запятую: "))
# my_list = numbers.split(",")
# max_num = 0
# i = 0
# for value in my_list:
#     if value <= my_list[i]:
#         max_num = my_list[i]
#         i += 1
#
# print(int(max_num))
# 2 Напишите программу, которая будет запрашивать на вход числа (каждое с новой строки) до тех пор,
# пока не будет введен ноль (0). На выход должно выводиться второе по величине значение.
# Ограничение: нельзя пользоваться готовой функцией для нахождения максимума (например, max()),
# готовыми функциями и методами сортировки (например, sort(),sorted()).
# Формат ввода:
# 4
# 6
# 7
# 7
# 0
# Формат вывода:
# 6


max_num = None
second_max_num = None

# Запрашиваем числа до тех пор, пока не будет введен ноль
while True:
    num = int(input("Введите целое число (для завершения введите 0): \n"))
    if num == 0:
        break
    if max_num is None or num > max_num:
        second_max_num = max_num
        max_num = num
    elif second_max_num is None or num > second_max_num:
        second_max_num = num

# Выводим второе по величине значение
if second_max_num is None:
    print("Не введено достаточно чисел.")
else:
    print("Второе по величине число:", second_max_num)
# 3 Напишите программу, которая принимает на вход год, а на выход выдает количество дней в этом году.
# Формат ввода:
# 2020
# Формат вывода:
# 366
year = int(input("Введите год: "))
# Проверяем, является ли год високосным
if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
    days = 366  # если високосный год
else:
    days = 365  # если не високосный год

print("В", year, "году", days, "дней.")
# 4 Напишите программу, которая на вход получает координаты двух клеток шахматной доски и выводит сообщение о том,
# являются ли эти клетки одного цвета.
# Формат ввода:
# c2
# e4
# Формат вывода:
# Клетки одинакового цвета

# Получаем координаты клеток от пользователя
cell1 = input("Введите координаты первой клетки: ")
cell2 = input("Введите координаты второй клетки: ")

# Преобразуем координаты клеток в числа
col1, row1 = ord(cell1[0]) - ord('a') + 1, int(cell1[1])
col2, row2 = ord(cell2[0]) - ord('a') + 1, int(cell2[1])

# Проверяем, являются ли клетки одного цвета и выводим соответствующее сообщение
if (col1 + row1) % 2 == (col2 + row2) % 2:
    print("Клетки одинакового цвета.")
else:
    print("Клетки разного цвета.")
# 5 Напишите программу, которая на вход получает число,
# а на выходе сообщает, простое это число или составное.
# Формат ввода:
# 169
# Формат вывода:
# Составное число
num = int(input("Введите число: "))

# Проверяем, является ли число простым
is_prime = True
if num > 1:
    for i in range(2, int(num ** 0.5) + 1):
        if num % i == 0:
            is_prime = False
            break
else:
    is_prime = False

# Выводим соответствующее сообщение
if is_prime:
    print("Простое число")
else:
    print("Составное число")
# 6 Напишите программу, которая на вход получает целое число больше 2
# и выводит по нему его наименьший натуральный делитель, отличный от 1.
# Формат ввода:
# 169
# Формат вывода:
# 13
num = int(input("Введите целое число больше 2: "))

# Перебираем делители от 2 до num - 1
for i in range(2, num):
    # Если число делится на i без остатка, выводим i и завершаем цикл
    if num % i == 0:
        print(i)
        break

# 7 Напишите программу, которая на вход получает число n и считает по нему сумму 1²+2²+3²+...+n².
# Ограничение: нельзя пользоваться функцией sum() и ее аналогами.
# Формат ввода:
# 3
# Формат вывода:
# 14
n = int(input("Введите число n: "))

# Инициализируем переменную для хранения суммы квадратов
sum_of_squares = 0

# Проходим от 1 до n и добавляем к сумме квадрат текущего числа
for i in range(1, n + 1):
    sum_of_squares += i ** 2

# Выводим сумму квадратов
print("Сумма квадратов чисел от 1 до", n, ":", sum_of_squares)
# 8 Напишите программу, которая на вход получает число n и считает по нему сумму 1! + 2! + 3! + ... + n!
# Ограничение: нельзя пользоваться готовой функцией factorial() из модуля math, функцией sum() и их аналогами.
# Формат ввода:
# 3
# Формат вывода:
# 9
n = int(input("Введите число n: "))

# Инициализируем переменную для хранения суммы
sum_of_factorials = 0
factorial = 1

# Вычисляем сумму факториалов от 1 до n
for i in range(1, n + 1):
    factorial *= i  # вычисляем факториал текущего числа
    sum_of_factorials += factorial  # добавляем к сумме

# Выводим сумму
print("Сумма факториалов от 1 до", n, ":", sum_of_factorials)
